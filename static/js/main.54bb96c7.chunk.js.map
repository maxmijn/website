{"version":3,"sources":["Components/PolygonSVG.js","Components/ClickableSVG.js","Components/Socials.js","Containers/LandingPage.js","Containers/FirstCase.js","Containers/App.js","serviceWorker.js","index.js","Images/vmc_white.png"],"names":["colors","PolygonSVG","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","color","changeColor","clearInterval","intervalId","newColor","Math","floor","random","length","setState","_this2","react_default","a","createElement","class","onClick","points","fill","React","Component","Canvas","viewBox","version","xmlns","id","stroke","stroke-width","fill-rule","transform","Components_PolygonSVG","Socials","href","index_esm","LandingPage","className","Components_Socials","ClickableSVG","FirstCase","src","vmc","style","height","marginTop","alt","App","Containers_LandingPage","Containers_FirstCase","Boolean","window","location","hostname","match","ReactDOM","render","Containers_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.54bb96c7.chunk.js","sourcesContent":["import React from 'react'\n\nconst colors = [\n  '#305f72',\n  '#f1d1b5',\n  '#f18c8e'\n]\n\nclass PolygonSVG extends React.Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      color: 'white'\n    }\n  }\n\n  componentDidMount () {\n    this.changeColor()\n    // this.intervalId = setInterval(this.changeColor.bind(this), 10000)\n  }\n\n  componentWillUnmount () {\n    clearInterval(this.intervalId)\n  }\n\n  changeColor () {\n    var newColor\n    do {\n      newColor = colors[Math.floor(Math.random() * colors.length)]\n    } while (this.state.color === newColor)\n    this.setState({ color: newColor })\n  }\n\n  render () {\n    return (\n      <polygon class='polygon' onClick={() => this.changeColor()} points={this.props.points} fill={this.state.color} />\n    )\n  }\n}\n\nexport default PolygonSVG\n","import React from 'react'\n// import PathSVG from './PathSVG'\nimport PolygonSVG from './PolygonSVG'\n\nclass Canvas extends React.Component {\n\n  render () {\n    return (\n      <svg viewBox='0 0 535 461' version='1.1' xmlns='http://www.w3.org/2000/svg'>\n        <title>Group 2</title>\n        <desc>Created with Sketch.</desc>\n        <g id='aa' stroke='none' stroke-width='1' fill='none' fill-rule='evenodd'>\n          <g id='Artboard' transform='translate(-208.000000, -158.000000)' fill='#EFDBDB'>\n            <g id='Group-2' transform='translate(208.000000, 158.000000)'>\n              <PolygonSVG id='Triangle-1' points='175.952772 220.464415 391.932036 221.620081 236.237525 322.138315'/>\n              <PolygonSVG id='Triangle-1' points='283.46439 65.1214057 391.965441 221.612493 176.005427 220.464897'/>\n              <PolygonSVG id='Triangle-1' points='484.319244 75.4203767 534.201969 130.228604 449.688232 130.228604'/>\n              <PolygonSVG id='Triangle-1' points='81.0889439 65.4591757 176.060594 220.484209 0.541034879 66.2636372'/>\n              <PolygonSVG id='Triangle-1' points='333.819556 138.224225 484.365928 75.4014897 391.961603 221.607129'/>\n              <PolygonSVG id='Triangle-1' points='176.005427 220.464897 236.223976 322.123506 126.169387 460.333524'/>\n              <PolygonSVG id='Triangle-1' points='41.0328178 0.0142070083 283.470703 65.114563 176.020747 220.452305'/>\n            </g>\n          </g>\n        </g>\n      </svg>\n    )\n  }\n}\n\nexport default Canvas\n","import React from 'react'\nimport { FaInstagram, FaGithub, FaEnvelope } from 'react-icons/fa'\n\nfunction Socials () {\n  return (\n    <div>\n      <a href='//https://github.com/maxmijn' >\n        <FaGithub />\n      </a>\n      <a href='//https://www.instagram.com/maxmijn/'>\n        <FaInstagram class='Social' />\n      </a>\n      <a href='mailto:max.mijnheer@gmail.com'>\n        <FaEnvelope class='Social' />\n      </a>\n    </div>\n  )\n}\n\nexport default Socials\n","import React from 'react'\nimport ClickableSVG from '../Components/ClickableSVG'\nimport Socials from '../Components/Socials'\n\nfunction LandingPage () {\n  return (\n    <div className='App row'>\n      <div className='Left col-sm-6'>\n        <h1>Hi!</h1>\n        <p> My name is Max Mijnheer. I am a developer from Amsterdam. Nulla consequat massa quis enim. Donec pede justo, fringilla vel, aliquet nec, vulputate eget, arcu. In enim justo, rhoncus ut, imperdiet a, venenatis vitae, justo. Nullam dictum felis eu pede mollis pretium. Integer tincidunt. Cras dapibus. Vivamus elementum semper nisi. Aenean vulputate eleifend tellus. Aenean leo ligula, porttitor eu, consequat vitae, eleifend ac, enim. Aliquam lorem ante, dapibus in, viverra quis, feugiat a, tellus. Phasellus viverra nulla ut metus varius laoreet. Quisque rutrum. Aenean imperdiet. Etiam ultricies nisi vel augue. Curabitur ullamcorper ultricies nisi. Nam eget dui. </p>\n        <Socials />\n      </div>\n      <div className='Right col-sm-6'>\n        <ClickableSVG />\n      </div>\n    </div>\n  )\n}\n\nexport default LandingPage\n","import React from 'react'\nimport vmc from '../Images/vmc_white.png'\n\nfunction FirstCase () {\n  return (\n    <div className='SecondPage row'>\n      <div className='Right col-sm-6'>\n        <img src={vmc} class='VMC-Logo' />\n        <div style={{ height: 100, marginTop: 50 }}>\n          <a href=\"https://apps.apple.com/us/app/vmc-go/id1434419887?mt=8\"><img class='Ios-app' src='https://linkmaker.itunes.apple.com/en-us/badge-lrg.svg?releaseDate=2018-09-24&kind=iossoftware&bubble=ios_apps'/></a>\n          <a href='https://play.google.com/store/apps/details?id=com.vmc.travel&hl=en_US&pcampaignid=MKT-Other-global-all-co-prtnr-py-PartBadge-Mar2515-1'><img class='Android-app' alt='Get it on Google Play' src='https://play.google.com/intl/en_us/badges/images/generic/en_badge_web_generic.png'/></a>\n        </div>\n      </div>\n      <div className='Left col-sm-6'>\n        <h1>VMC GO</h1>\n        <p> My name is Max Mijnheer. I am a developer from Amsterdam. Nulla consequat massa quis enim. Donec pede justo, fringilla vel, aliquet nec, vulputate eget, arcu. In enim justo, rhoncus ut, imperdiet a, venenatis vitae, justo. Nullam dictum felis eu pede mollis pretium. Integer tincidunt. Cras dapibus. Vivamus elementum semper nisi. Aenean vulputate eleifend tellus. Aenean leo ligula, porttitor eu, consequat vitae, eleifend ac, enim. Aliquam lorem ante, dapibus in, viverra quis, feugiat a, tellus. Phasellus viverra nulla ut metus varius laoreet. Quisque rutrum. Aenean imperdiet. Etiam ultricies nisi vel augue. Curabitur ullamcorper ultricies nisi. Nam eget dui. </p>\n        <a href='//https://vmc.ai'>VMC.ai website</a>\n      </div>\n    </div>\n  )\n}\n\nexport default FirstCase\n","import React from 'react'\nimport '../Styling/App.css'\nimport LandingPage from './LandingPage'\nimport FirstCase from './FirstCase'\n\nfunction App () {\n  return (\n    <div>\n      <LandingPage />\n      <FirstCase />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // 'Content is cached for offline use.' message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './Styling/index.css'\nimport App from './Containers/App'\nimport * as serviceWorker from './serviceWorker'\nimport 'bootstrap/dist/css/bootstrap.css'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","module.exports = __webpack_public_path__ + \"static/media/vmc_white.269f57b0.png\";"],"sourceRoot":""}